var documenterSearchIndex = {"docs":
[{"location":"test_prob.html#Test-Problem","page":"Test Problem","title":"Test Problem","text":"","category":"section"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"Consider the parametrized PDE problem","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"begincases-fracddx left(kappa(xp) fracddx u(xp)right) = f(xp)quad xin01\nu(0p) = 00\nu(1p) = 10\n01leq p_1p_2leq 21\nendcases","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"where ","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"kappa(xp) = sum_i=1^2 p_i cdot (11 + sin(2pi i x))","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"and ","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"f(xp) = begincases100  x  05  00  x leq 05endcasesbigg + sum_i=1^2 p_i cdot sin(2pi i x)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"are affinely parameter dependent diffusion coefficient and forcing terms respectively. ","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"We can discretize and explicitly solve this problem by using finite differences, the problem can be rewritten as","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"A(p) u = b(p)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"where uinmathbbR^n,  A(p)inmathbbR^ntimes n is a positive-definite matrix, and both A(p) and b(p)inmathbbR^n have affine parameter dependence.","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"using ModelOrderReductionToolkit\nusing Plots\nusing Printf\nusing Random\nusing Colors\ngr() # hide\nRandom.seed!(1) # hide\n# Boundary conditions\nuleft = 0.0\nuright = 1.0\nP = 2\nκ_i(i,x) = 1.1 .+ sin.(2π * i * x)\nκ(x,p) = sum([p[i] * κ_i(i,x) for i in 1:P])\n# Derivative of diffusion coefficient\nκp_i(i,x) = 2π * i * cos.(2π * i * x)\nκp(x,p) = sum([p[i] * κp_i(i,x) for i in 1:P])\n# Parameter dependent source term\nf_i(i,x) = i == 1 ? (x .> 0.5) .* 10.0 : 20 .* sin.(2π * (i-1) * x)\nf(x,p) = f_i(1,x) .+ sum([p[i-1] * f_i(i,x) for i in 2:P+1])\n# Space setup\nh = 1e-3\nxs = Vector((0:h:1)[2:end-1])\nN = length(xs)\n# Helper to generate random parameter vector\nrandP() = 0.1 .+ 2 .* rand(P)\n# Ai matrices\nfunction makeAi(i)\n    A = zeros(N,N)\n    for j in 1:N\n        A[j,j]   = 2*κ_i(i,xs[j]) / h^2\n        if j<N\n            A[j,j+1] = -κp_i(i,xs[j]) / (2h) - κ_i(i,xs[j]) / h^2\n        end\n        if j>1\n            A[j,j-1] = κp_i(i,xs[j]) / (2h) - κ_i(i,xs[j]) / h^2\n        end\n    end\n    return A\nend\nAis = Matrix{Float64}[]\nfor i in 1:P\n    push!(Ais, makeAi(i))\nend\n# θAis\nfunction makeθAi(p,i)\n    return p[i]\nend\nfunction makeA(p)\n    A = zeros(size(Ais[1]))\n    for i in eachindex(Ais)\n        A .+= makeθAi(p,i) .* Ais[i]\n    end\n    return A\nend\n# bi vectors\nfunction makebi(i)\n    b = f_i(i,xs)\n    if i > 1\n        b[1] -= uleft * (κp_i(i,xs[1]) / (2h) - κ_i(i,xs[1]) / h^2)\n        b[end] -= uright * (-κp_i(i,xs[N]) / (2h) - κ_i(i,xs[N]) / h^2)\n    end\n    return b\nend\nbis = Vector{Float64}[]\nfor i in 1:P+1\n    push!(bis, makebi(i))\nend\n# θbis\nfunction makeθbi(p,i)\n    if i == 1\n        return 1.0\n    else\n        return p[i-1]\n    end\nend\nfunction makeb(p)\n    b = zeros(size(bis[1]))\n    for i in eachindex(bis)\n        b .+= makeθbi(p,i) .* bis[i]\n    end\n    return b\nend\n\nplt = plot(legend=:topleft)\ncolors = palette(:tab10)\nps = []\nfor i in 1:10\n    p = randP()\n    push!(ps, p)\n    A = makeA(p)\n    b = makeb(p)\n    u = A \\ b\n    plot!(xs, u, label=@sprintf(\"p=[%.2f,%.2f]\",p...), c=colors[i])\nend\ntitle!(\"Example solutions\")\nsavefig(plt, \"ex1.svg\"); nothing # hide","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"(Image: )","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"We will construct a reduced basis method (RBM) to construct an r-dimensional solution space to construct approximations","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"u(p) approx V u_r(p) = sum_i=1^r u_r^(i)(p) v_i","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"where v_i_i=1^r is a chosen basis with u_r(p)inmathbbR^r, VinmathbbR^ntimes r, and rll n. Additionally, due to the potential computational cost of inverting large A(p), we wish to minimize the number of times we solve the full-order, truth, system.","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"Defining e(p)=u(p) - V u_r(p) to be the error in our approximation, and r(p)=b(p) - A(p) V u_r(p) to be the residual, one can show that","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"e(p)_2 = A(p)^-1 A(p)(u(p) - V u_r(p))_2 leq r(p)_2  sigma_min(A(p))","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"The goal of this method will be to use offline time to approximate the stability factor, sigma_min(A(p)), and the norm of the residual, r(p)_2.","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"First, we will use the successive constraint method, (SCM), to compute a lower-bound approximation of the stability factor, to assure that the above error inequality still holds. For details on implementation, see reference 1. In ModelOrderReductionToolkit.jl, the implementation for a symmetric positive definite problem is as follows:","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"# Generate parameter discretization set\np_lb = 0.1\np_ub = 2.1\nparams = []\nfor p1 in range(p_lb,p_ub,21)\n    for p2 in range(p_lb,p_ub,21)\n        push!(params, [p1,p2])\n    end\nend\n# Initialize SCM Object\nMa = 50; Mp = 15; ϵ_SCM = 1e-2;\nscm = initialize_SCM_SPD(params, Ais, makeθAi, Ma, Mp, ϵ_SCM)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"As can be seen in the below example, the method find_sigma_bounds(scm,p) returns both an upper-bound and a lower-bound estimate for the stability factor with a relative error on the order of ϵ_SCM as long as it is not too far from a parameter value in the discretization, params.","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"p = randP()\nfind_sigma_bounds(scm, p)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"Can also directly use scm as a function to approximate the lower bound","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"scm(p)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"Note that in the case that A(p) is not SPD, one should instead use the noncoercive method.","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"scm = initialize_SCM_Noncoercive(params, Ais, makeθAi, Ma, Mp, ϵ_SCM)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"With the SCM object initialized, one can call the GreedyRBAffineLinear method to greedily generate a reduced basis, v_i_i=1^r, one element at a time, to an l^2 error on the order of epsilon_greedy, see reference 2,","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"ϵ_greedy = 1e-1  \ngreedy_sol = GreedyRBAffineLinear(params, Ais, makeθAi, bis, makeθbi, scm, ϵ_greedy)","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"plt = plot(legend=:topleft)\nfor i in 1:10\n    p = ps[i]\n    A = makeA(p)\n    b = makeb(p)\n    u = A \\ b\n    u_r = greedy_sol(p)\n    plot!(xs, u, c=colors[i],label=(i==1 ? \"truth\" : false))\n    plot!(xs, u_r, c=colors[i], ls=:dash,label=(i==1 ? \"greedy\" : false))\nend\ntitle!(\"Example solutions and greedy solutions\")\nsavefig(plt, \"ex2.svg\"); nothing # hide","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"(Image: )","category":"page"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"Note that the method GreedyRBAffineLinear takes advantage of the affine parameter dependence of both the left and right hand sides for quick evaluation (approximation) of the norm of the residual, and the stability factor, which does not depend on the dimension of the original problem n. Only after it has looped through all of the parameters in the discretization, it chooses the one that displays the worst upper-bound error, computes the full-order solution for that parameter, and adds that solution as the next reduced basis element, v_i.","category":"page"},{"location":"test_prob.html#References:","page":"Test Problem","title":"References:","text":"","category":"section"},{"location":"test_prob.html","page":"Test Problem","title":"Test Problem","text":"D.B.P. Huynh, G. Rozza, S. Sen, A.T. Patera. A successive constraint linear optimization method for lower bounds of parametric coercivity and inf–sup stability constants. Comptes Rendus Mathematique. Volume 345, Issue 8. 2007. Pages 473-478. https://doi.org/10.1016/j.crma.2007.09.019.\nQuarteroni, Alfio, Andrea Manzoni, and Federico Negri. Reduced Basis Methods for Partial Differential Equations. Vol. 92. UNITEXT. Cham: Springer International Publishing, 2016. http://link.springer.com/10.1007/978-3-319-15431-2.","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.jl-Docstrings","page":"Docstrings","title":"ModelOrderReductionToolkit.jl Docstrings","text":"","category":"section"},{"location":"index.html#Projections-functionality:","page":"Docstrings","title":"Projections functionality:","text":"","category":"section"},{"location":"index.html","page":"Docstrings","title":"Docstrings","text":"singular_values_information\npca_projector\nqr_projector\nModelOrderReductionToolkit.full_lu\neim_projector","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.singular_values_information","page":"Docstrings","title":"ModelOrderReductionToolkit.singular_values_information","text":"singular_values_information(σs)\n\nGiven a vector of real singular values σs, return a vector providing the maximum percentage of \"information\" available from a d-dimensional representation in Frobenius norm.\n\nUses the fact that the maximum error in projecting onto the first d left singular vectors is given by\n\n||A-A_d||_F = √ (σ_{d+1}^2 + ... + σ_N^2).\n\nSo the information with a d-dimensional representation given by\n\nsingular_values_information[d] = 1 - √ (σ_{d+1}^2 + ... + σ_N^2) / √ (σ_1^2 + ... + σ_N^2)\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.pca_projector","page":"Docstrings","title":"ModelOrderReductionToolkit.pca_projector","text":"P = pca_projector(A, dim=-1; info_tol=1e-2)\n\nUses the first dim singular vectors of A to generate an orthogonal projection operator P. Operator performs matrix operation and can be done on vectors or matrices of proper dimension.\n\nIf dim is not provided, uses n singular values  where n is the smallest integer such that the amount of information per the Frobenious norm is at least 1-info_tol.\n\nReturns a functor P which stores the reduced dimension n, the dimension of vectors to project m, the singular values of A in s, and the vectors to project onto in the m × n matrix M.\n\nCall with P(b) where b is a m vector or a matrix with m rows, projecting each column.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.qr_projector","page":"Docstrings","title":"ModelOrderReductionToolkit.qr_projector","text":"qr_projector(A, dim)\n\nUses the first dim columns of A by qr-pivot order (norm) to generate an orthogonal projection operator P. Operator performs matrix operation and can be done on vectors or matrices of proper dimension.\n\nReturns a functor P which stores the reduced dimension n, the dimension of vectors to project m, the vectors  to project onto in the m × n matrix M, and the matrix inv(M'M) in MtMinv.\n\nCall with P(b) where b is a m vector or a matrix with m rows, projecting each column.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.full_lu","page":"Docstrings","title":"ModelOrderReductionToolkit.full_lu","text":"full_lu(A; steps=-1)\n\nPerforms a completely pivoted LU factorization on the matrix A, returning permutation vectors Q and P, and lower and upper triangular matrices L and U, such that if all steps are performed, then A[P,Q] = L*U.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.eim_projector","page":"Docstrings","title":"ModelOrderReductionToolkit.eim_projector","text":"P = eim_projector(A, dim)\n\nUses discrete empirical interpolation to generate a projector operator P that selects a few rows from the given vector or matrix, and then projects them onto a set of columns chosen by a greedy procedure.\n\nReturns a functor P which stores the reduced dimension n, the dimension of vectors to project m, the matrix A_C which is A with n extracted columns, and the matrix A_CR which is A with n extracted rows and columns.\n\nCall with P(b) where b is a m vector or a matrix with m rows, projecting each column.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Greedy-linear-affine-reduced-basis","page":"Docstrings","title":"Greedy linear affine reduced basis","text":"","category":"section"},{"location":"index.html","page":"Docstrings","title":"Docstrings","text":"ModelOrderReductionToolkit.Greedy_RB_Affine_Linear\nGreedyRBAffineLinear\nModelOrderReductionToolkit.greedy_rb_err_data\nModelOrderReductionToolkit.append_affine_rbm!\nModelOrderReductionToolkit.init_affine_rbm","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.Greedy_RB_Affine_Linear","page":"Docstrings","title":"ModelOrderReductionToolkit.Greedy_RB_Affine_Linear","text":"Greedy_RB_Affine_Linear\n\nStruct for containing initialized greedy reduced-basis method for parametrized problem A(p) x = b(p) with affine parameter dependence A(p) = ∑ makeθAi(p,i) Ais[i], and b(p) = ∑ makeθbi(p,i) bis[i].\n\nUses Galerkin projection onto span of columns of V,  V' A(p) V x_r = V' b(p), with V x_r ≈ x = A(p)^(-1) b(p).\n\nGiven a new parameter vector, p, and an object greedy_sol::Greedy_RB_Affine_Linear, form the reduced basis solution with greedy_sol(p[, full=true]). \n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelOrderReductionToolkit.GreedyRBAffineLinear","page":"Docstrings","title":"ModelOrderReductionToolkit.GreedyRBAffineLinear","text":"GreedyRBAffineLinear(param_disc, Ais, makeθAi, bis, makeθbi, approx_stability_factor[, ϵ=1e-2, param_disc=nothing; max_snapshots=-1, noise=1])\n\nConstructs a Greedy_RB_Affine_Linear object for parametrized problem A(p) x(p) = b(p) with affine parameter dependence: A(p) = ∑ makeθAi(p,i) Ais[i], and b(p) = ∑ makeθbi(p,i) bis[i].\n\nparam_disc must either be a matrix with columns as parameters, or a vector of parameter vectors. Uses the function approx_stability_factor to approximate the stability factor for each parameter in the discretization,  chooses first parameter to be one with smallest stability factor. Afterwards, utilizes the affine decomposition of A(p)  and b(p) to compute the norm of the residual, and compute upper-bounds for the error: ||x - V x_r|| <= ||b(p) - A(p) V x_r|| / σ_min(A(p)).\n\nGreedily chooses parameters and then forms truth solution for parameter that results in largest upper-bound for error. Then computes ||x - V x_r||, and loops, adding to reduced basis, V, until the truth error is less than ϵ.\n\nIf max_snapshots specified, will halt after that many if ϵ accuracy not yet reached. noise determines amount  of printed output, 0 for no output, 1 for basic, and 2 for more.\n\n\n\n\n\nGreedyRBAffineLinear(scm_init, Ais, makeθAi, bis, makeθbi[, ϵ=1e-2, param_disc=nothing; max_snapshots=-1, noise=1, sigma_eps=1.0, lb_stability=true])\n\nConstructs a Greedy_RB_Affine_Linear object for parametrized problem A(p) x = b(p) with affine parameter dependence: A(p) = ∑ makeθAi(p,i) Ais[i], and b(p) = ∑ makeθbi(p,i) bis[i]. Uses scm_init to approximate the stability factor for each parameter in the discretization, chooses first  parameter to be one with smallest stability factor. Afterwards, utilizes the affine decomposition of A(p)  and b(p) to approximate the norm of the residual, and compute upper-bounds for the error: ||x - V x_r|| <= ||b(p) - A(p) V x_r|| / σ_min(A(p)).\n\nGreedily chooses parameters and then forms truth solution for parameter that results in largest upper-bound for error. Then computes ||x - V x_r||, and loops, adding to reduced basis, V, until the truth error is less than ϵ.\n\nIf param_disc not passed in, then params will be taken from scm_init. If max_snapshots specified, will halt after that many if ϵ accuracy not yet reached. noise determines amount of printed output, 0 for no output, 1 for basic, and 2 for more.\n\nsigma_eps determines the relative error allowed between the upper and lower-bound approximations for the stability factor. If the relative error is found to be greater than sigma_eps, then the stability factor is explicitly computed and added to the scm_init object.\n\nlb_stability defaults to true, and if true, then the lower bound for the stability factor is used in the greedy method to ensure sharpness of the upper-bound on the error. If set to false, then will use the upper-bound approximate of the stability factor instead.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.greedy_rb_err_data","page":"Docstrings","title":"ModelOrderReductionToolkit.greedy_rb_err_data","text":"greedy_rb_err_data(param_disc,Ais,makeθAi,bis,makeθbi,approx_stability_factor[,num_snapshots=10,ϵ=1e-2;noise=1)\n\nGenerates error data for parametrized problem A(p) x(p) = b(p) with affine parameter dependence: A(p) = ∑ makeθAi(p,i) Ais[i], and b(p) = ∑ makeθbi(p,i) bis[i].\n\nNote: This method calls the full order solver on all parameters in param_disc, may take a long time to run.\n\nSee the docs for GreedyRBAffineLinear for more information.\n\nReturns a dictionary, ret_data, with the following components:\n\nret_data[:basis_dim] - A vector of reduced basis dimensions from 2 to num_snapshots\n\nret_data[:weak_greedy_ub] - A vector of the maximum upperbound l2 error found by the  (weak) greedy reduced basis method (see GreedyRBAffineLinear)\n\nret_data[:weak_greedy_true] - A vector of the truth l2 error of the vector chosen by the  (weak) greedy reduced basis method (see GreedyRBAffineLinear)\n\nret_data[:weak_greedy_true_ub] - A vector of the maximum true l2 error found by the  (weak) greedy reduced basis method (see GreedyRBAffineLinear)\n\nret_data[:strong_greedy_err] - A vector of the maximum l2 error found by a   strong greedy reduced basis method, uses knowledge of all solutions\n\nret_data[:strong_greedy_proj] - A vector of the maximum l2 error found by projecting   truth solutions onto the strong greedy reduced basis, uses knowledge of all solutions\n\nret_data[:pca_err] - A vector of the maximum l2 error found by a PCA/POD reduced basis method, uses knowledge of all solutions\n\nret_data[:strong_greedy_proj] - A vector of the maximum l2 error found by projecting   truth solutions onto the PCA/POD reduced basis, uses knowledge of all solutions\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.append_affine_rbm!","page":"Docstrings","title":"ModelOrderReductionToolkit.append_affine_rbm!","text":"append_affine_rbm!(x, res_init, V, Ais, VtAVis, bis, Vtbis)\n\nGiven a new vector x to append as a new column to V, update the matrices in VtAVis and the vectors in Vtbis. Also, return VtAV and Vtb which are preallocated, properly sized, matrices. Must pass in type T.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.init_affine_rbm","page":"Docstrings","title":"ModelOrderReductionToolkit.init_affine_rbm","text":"init_affine_rbm(x, Ais, bis, makeθAi, makeθbi, T)\n\nGiven a vector x, generate the matrices V, VtAVi, and VtAVis, and the vectors Vtb and Vtbis for preallocation and quick computation of reduced basis solutions for the problem A(p)x(p)=b(p) with affinely dependent matrix A(p) = ∑ makeθAi(p,i) Ais[i] and vector b(p) = ∑ makeθbi(p,i) bis[i]. Must pass in type T.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Successive-constraint-method-(SCM):","page":"Docstrings","title":"Successive constraint method (SCM):","text":"","category":"section"},{"location":"index.html","page":"Docstrings","title":"Docstrings","text":"ModelOrderReductionToolkit.SCM_Init\ninitialize_SCM_SPD\ninitialize_SCM_Noncoercive\nfind_sigma_bounds\nModelOrderReductionToolkit.form_upperbound_set!\nModelOrderReductionToolkit.solve_LBs_LP","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.SCM_Init","page":"Docstrings","title":"ModelOrderReductionToolkit.SCM_Init","text":"SCM_Init is a struct for holding all of the variables and methods necessary for running the successive constraint method on an affinely-parameter-dependent matrix A(p) = ∑_{i=1}^QA θ_i(p) A_i to compute a lower-bound approximation to the minimum singular value of A.\n\nIt is additionally a functor as calling scm_init(p) on a parameter vector p will return the lower-bound estimate of the minimum singular value of A(p).\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelOrderReductionToolkit.initialize_SCM_SPD","page":"Docstrings","title":"ModelOrderReductionToolkit.initialize_SCM_SPD","text":"initialize_SCM_SPD(param_disc,Ais,makeθAi,Mα,Mp,ϵ;[optimizer=Tulip.Optimizer,noise=1]) = SCM_Init\n\nMethod to initialize an SCM_Init object to perform the SCM on an affinely-parameter-dependent symmetric positive definite matrix A(p) = ∑ makeθAi(p,i) Ais[i] to compute a lower-bound approximation to the minimum singular value (or eigenvalue) of A(p).\n\nParameters:\n\nparam_disc: Either a matrix where each column is a parameter value in the discretization, or a vector of parameter vectors.\n\nAis: A vector of matrices, of the same dimension, used to construct the full matrix A(p) = ∑ makeθAi(p,i) Ais[i]\n\nmakeθAi(p,i): A function that takes in as input a parameter vector and an index such that A(p) = ∑ makeθAi(p,i) Ais[i]\n\nMα: Stability constraint constant (a positive integer)\n\nMp: Positivity constraint constant (a positive integer)\n\nϵ: Relative difference allowed between upper-bound and lower-bound approximation on the parameter discretization (between 0 and 1)\n\noptimizer: Optimizer to pass into JuMP Model method for solving linear programs\n\nnoise: Determines amount of printed information, between 0 and 2 with 0 being nothing displayed; default 1\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.initialize_SCM_Noncoercive","page":"Docstrings","title":"ModelOrderReductionToolkit.initialize_SCM_Noncoercive","text":"initialize_SCM_Noncoercive(param_disc,Ais,makeθAi,Mα,Mp,ϵ;[optimizer=Tulip.Optimizer,noise=1]) = SCM_Init\n\nMethod to initialize an SCM_Init object to perform the SCM on an affinely-parameter-dependent matrix A(p) = ∑ makeθAi(p,i) Ais[i] to compute a lower-bound approximation to the minimum singular value of A.\n\nParameters:\n\nparam_disc: Either a matrix where each column is a parameter value in the discretization, or a vector of parameter vectors.\n\nAis: A vector of matrices, of the same dimension, used to construct the full matrix A(p) = ∑ makeθAi(p,i) Ais[i]\n\nmakeθAi(p,i): A function that takes in as input a parameter vector and an index such that A(p) = ∑ makeθAi(p,i) Ais[i]\n\nMα: Stability constraint constant (a positive integer)\n\nMp: Positivity constraint constant (a positive integer)\n\nϵ: Relative difference allowed between upper-bound and lower-bound approximation on the parameter discretization (between 0 and 1)\n\noptimizer: Optimizer to pass into JuMP Model method for solving linear programs\n\nnoise: Determines amount of printed information, between 0 and 2 with 0 being nothing displayed; default 1\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.find_sigma_bounds","page":"Docstrings","title":"ModelOrderReductionToolkit.find_sigma_bounds","text":"find_sigma_bounds(scm_init, p[, sigma_eps=1.0; noise=0])\n\nMethod that performs the online phase of SCM for the matrix A(p) = ∑ makeθAi(p,i) Ais[i] to compute lower and upper-bound approximations to the minimum singular value of A. Additional optional parameter sigma_eps such that if the computed ϵ difference of (σ_UB - σ_LB) / σ_UB is less than sigma_eps,  we know that not enough stability constraints were enforced, and  the minimum singular value is directly computed, appended to the  scm_init's upper-bound set, and returned as both the lower and upper-bounds.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.form_upperbound_set!","page":"Docstrings","title":"ModelOrderReductionToolkit.form_upperbound_set!","text":"form_upperbound_set!(scm_init; [noise=1])\n\nHelper method that takes in an SCM_Init_SPD object and forms the upper-bound sets C, Y_UB, and σ_UBs until the ϵ tolerance provided in scm_init is met across the parameter discretization.  The noise input determines the  amount of printed information, between 0 and 2, with 0 being nothing displayed, and 1 is default.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.solve_LBs_LP","page":"Docstrings","title":"ModelOrderReductionToolkit.solve_LBs_LP","text":"solve_LBs_LP(scm_init, p[; noise=1]) = (σ_LB, y_LB)\n\nHelper method that takes in an SCM_Init_SPD object and a parameter vector p, and sets up and solves a linear program to compute a lower-bound σ_LB to the minimum singular value of A(p) along with the associated vector y_LB.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Radial-basis-interpolatory-stability-factor","page":"Docstrings","title":"Radial-basis interpolatory stability factor","text":"","category":"section"},{"location":"index.html","page":"Docstrings","title":"Docstrings","text":"ModelOrderReductionToolkit.Sigma_Min_RBF\nmin_sigma_rbf\nupdate_sigma_rbf!","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.Sigma_Min_RBF","page":"Docstrings","title":"ModelOrderReductionToolkit.Sigma_Min_RBF","text":"Sigma_Min_RBF\n\nA mutable struct used for approximating the minimum singular value of a matrix  with parametric dependence A(p). Given  a new parameter value p, approximate σ_min(A(p)) with sigma_min_rbf(p).\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelOrderReductionToolkit.min_sigma_rbf","page":"Docstrings","title":"ModelOrderReductionToolkit.min_sigma_rbf","text":"min_sigma_rbf(params, Ais, makeθAi[, ϕ=gaussian_rbf])\n\nMethod to form a interpolatory radial-basis function functor to approximate the minimum singular value of a parametrized matrix A(p). Pass as input either a matrix params where each column is a parameter vector, or a vector  of vectors params where each vector is a parameter. \n\nOptional argument for the radial-basis function ϕ, which defaults to the Gaussian ϕ(r) = exp(-r^2).\n\nReturns a functor sigma_min_rbf <: Sigma_Min_RBF such that given a new parameter vector p, sigma_min_rbf(p) returns an approximation to the minimum singular value of A(p).\n\nOffline, solves for the minimum singular value for each parameter in params, and uses this to form an interpolatory approximation in the form of log(σ_min(A(p))) ≈ ω_0 + ∑ (ω_i p_i) + ∑ (γ_i ϕ(p - p_i)) where p_i is the i'th parameter in params, and ω_0, ω_i, and γ_i are determined by the given params such that the approximation holds true for all p_i, and that ∑ γ_i = 0, and that ∑ γ_i p_i[j] = 0 for each j.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.update_sigma_rbf!","page":"Docstrings","title":"ModelOrderReductionToolkit.update_sigma_rbf!","text":"update_sigma_rbf!(sigma_min_rbf, ϕ)\n\nGiven a Sigma_Min_RBF object sigma_min_rbf, update its RBF, ϕ, and update the coefficients.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Computation-of-norm-of-residual","page":"Docstrings","title":"Computation of norm of residual","text":"","category":"section"},{"location":"index.html","page":"Docstrings","title":"Docstrings","text":"ModelOrderReductionToolkit.Affine_Residual_Init\nresidual_norm_affine_init\nadd_col_to_V!\nresidual_norm_affine_online\nresidual_norm_explicit","category":"page"},{"location":"index.html#ModelOrderReductionToolkit.Affine_Residual_Init","page":"Docstrings","title":"ModelOrderReductionToolkit.Affine_Residual_Init","text":"Affine_Residual_Init\n\nA struct for containing the necessary vectors and matrices for quickly compute the X-norm of the residual, r(x_r,p) = A(p) (x - V x_r) = b(p) - A(p) V x_r, by taking advantage of affine parameter dependence of A(p) and b(p).\n\nHere, x solves A(p) x = b(p) with A and b having affine parameter dependence, and V is a matrix with columns defining bases for approximation spaces x ≈ V x_r.\n\n\n\n\n\n","category":"type"},{"location":"index.html#ModelOrderReductionToolkit.residual_norm_affine_init","page":"Docstrings","title":"ModelOrderReductionToolkit.residual_norm_affine_init","text":"residual_norm_affine_init(Ais, makeθAi, bis, makeθbi, V[, X0=nothing, T=Float64])\n\nMethod that constructs the necessary vectors and matrices to quickly compute the X-norm of the residual,  r(x_r,p) = A(p) (x - V x_r) = b(p) - A(p) V x_r, by taking advantage of affine parameter dependence of A(p) and b(p).\n\nPass as input a vector of matrices Ais, and a function makeθAi such that the affine construction of A is given by A(p) = ∑_{i=1}^QA makeθAi(p,i) * Ais[i], and similarly a vector of vectors bis and a function makeθbi such that the affine construction of b is given by  b(p) = ∑_{i=1}^Qb makeθbi(p,i) * bis[i].\n\nAdditionally, pass in a matrix V which contains as columns a basis for a reduced space, x ≈ V x_r with the dimension of x_r less than that of x.\n\nOptionally pass in a matrix X from which the X-norm of the residual will be computed in the method residual_norm_affine_online. If X remains as nothing, then will choose it to be the identity matrix to compute the 2-norm of the residual.\n\nIf using complex numbers, specify T=ComplexF64.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.add_col_to_V!","page":"Docstrings","title":"ModelOrderReductionToolkit.add_col_to_V!","text":"add_col_to_V!(res_init, v, T)\n\nMethod to add a vector v to the columns of the matrix V in the Affine_Residual_Init object, res_init, without recomputing all terms. Must specify type T.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.residual_norm_affine_online","page":"Docstrings","title":"ModelOrderReductionToolkit.residual_norm_affine_online","text":"residual_norm_affine_online(res_init, x_r, p)\n\nMethod that given res_init, an Affine_Residual_Init object, computes the X-norm of the residual,  r(x_r,p) = A(p) (x - V x_r) = b(p) - A(p) V x_r, by taking advantage of affine parameter dependence of A(p) and b(p).\n\nPass as input the Affine_Residual_Init object, res_init, a reduced vector x_r, and the corresponding parameter vector p.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ModelOrderReductionToolkit.residual_norm_explicit","page":"Docstrings","title":"ModelOrderReductionToolkit.residual_norm_explicit","text":"residual_norm_explicit(x_approx, p, makeA, makeb, X=nothing)\n\nMethod that computes the X-norm of the residual,  r(x_r,p) = A(p) (x - x_approx) = b(p) - A(p) x_approx explicitly where x is the solution to A(p) x = b(p), and x_approx is an approximation, x ≈ x_approx.\n\nPass as input the approximation vector x_approx, the corresponding parameter, p, the method makeA(p) for constructing the matrix A(p), and the method makeb(p) for constructing the vector b(p).\n\nOptionally pass in a matrix X from which the X-norm of the residual will be computed. If X remains as nothing, then will choose it to be the identity matrix to compute the 2-norm of the residual.\n\n\n\n\n\nresidual_norm_explicit(x_approx, p, Ais, makeθAi, bis, makeθbi, X=nothing)\n\nMethod that computes the X-norm of the residual,  r(x_r,p) = A(p) (x - x_approx) = b(p) - A(p) x_approx explicitly where x is the solution to A(p) x = b(p), and x_approx is an approximation, x ≈ x_approx.\n\nPass as input the approximation vector x_approx, the corresponding parameter, p, a vector of matrices Ais,  and a function makeθAi such that the affine construction  of A is given by A(p) = ∑_{i=1}^QA makeθAi(p,i) * Ais[i],  and similarly a vector of vectors bis and a function makeθbi  such that the affine construction of b is given by  b(p) = ∑_{i=1}^Qb makeθbi(p,i) * bis[i].\n\nOptionally pass in a matrix X from which the X-norm of the residual will be computed. If X remains as nothing, then will choose it to be the identity matrix to compute the 2-norm of the residual.\n\n\n\n\n\n","category":"function"}]
}
